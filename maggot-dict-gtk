#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

from MaggotDict import *
from MaggotDict.gtk.main import *

from MaggotDict.pretzel.app import *
from MaggotDict.pretzel.glib import *
#------------------------------------------------------------------------------#
# Main                                                                         #
#------------------------------------------------------------------------------#
@Async
def Main (app):
    with Dictionary (logger = app.Logger) as dct:
        yield AnyFuture (MainWindow (app, dct).OnDelete.Await (), app.OnQuit.Await ())

    '''
    # Async version
    from MaggotDict.pretzel.remoting import ForkDomain
    with ForkDomain (app.Core, push_main = False, run = False) as domain:
        yield domain.Run ()
        try:
            dct = yield domain.InstanceCreate.Async (Dictionary)
            with app.Log.Pending ('Running'):
                yield AnyFuture (MainWindow (app, dct).OnDelete.Await (), app.OnQuit.Await ())
        finally:
            yield dct.Dispose.Async ()
    '''

if __name__ == '__main__':
    # import gc; gc.disable ()
    Application (Main, 'maggot-dict-gtk', core = GCore (), console = True)
# vim: nu ft=python columns=120 :
